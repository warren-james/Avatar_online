geom_point(alpha = .03, size = .03)
harmonograph <- function(n = 500000,
A1 = 1, A2 = 1, A3 = 1, A4 = 1,
d1 = 0.039, d2 = 0.006, d3 = 0, d4 = 0.0045,
f1 = 10, f2 = 3, f3 = 1, f4 = 2,
p1 = 0, p2 = 0, p3 = pi/2, p4 = 0) {
data.frame(t = seq(0, 350*pi, 350*pi/n)) %>%
dplyr::mutate(
x = runif(1, A1,1)*sin(t*f1+p1)*exp(-d1*t) + A2*sin(t*f2+p2)*exp(-d2*t),
y = runif(1, A3,1)*sin(t*f3+p3)*exp(-d3*t) + A4*sin(t*f4+p4)*exp(-d4*t)
) %>%
dplyr::select(-t)
}
x11()
harmonograph() %>%
ggplot(aes(x,y)) +
geom_point(alpha = .03, size = .03)
harmonograph <- function(n = 500000,
A1 = 5, A2 = 6, A3 = 7, A4 = 1,
d1 = 0.039, d2 = 0.006, d3 = 0, d4 = 0.0045,
f1 = 10, f2 = 3, f3 = 1, f4 = 2,
p1 = 0, p2 = 0, p3 = pi/2, p4 = 0) {
data.frame(t = seq(0, 350*pi, 350*pi/n)) %>%
dplyr::mutate(
x = A1*sin(t*f1+p1)*exp(-d1*t) + A3*sin(t*f2+p2)*exp(-d2*t),
y = A2*sin(t*f3+p3)*exp(-d3*t) + A4*sin(t*f4+p4)*exp(-d4*t)
) %>%
dplyr::select(-t)
}
x11()
harmonograph() %>%
ggplot(aes(x,y)) +
geom_point(alpha = .03, size = .03)
harmonograph <- function(n = 500000,
A1 = 1, A2 = 6, A3 = 7, A4 = 1,
d1 = 0.039, d2 = 0.006, d3 = 0, d4 = 0.0045,
f1 = 10, f2 = 3, f3 = 1, f4 = 2,
p1 = 0, p2 = 0, p3 = pi/2, p4 = 0) {
data.frame(t = seq(0, 350*pi, 350*pi/n)) %>%
dplyr::mutate(
x = A1*sin(t*f1+p1)*exp(-d1*t) + A3*sin(t*f2+p2)*exp(-d2*t),
y = A2*sin(t*f3+p3)*exp(-d3*t) + A4*sin(t*f4+p4)*exp(-d4*t)
) %>%
dplyr::select(-t)
}
x11()
harmonograph() %>%
ggplot(aes(x,y)) +
geom_point(alpha = .03, size = .03)
cool_shape = c(A1 = 1, A2 = 1, A3 = 1, A4 = 1,
d1 = 0.0085, d2 = 0, d3 = 0.065, d4 = 0,
f1 = 2.01, f2 = 3, f3 = 3, f4 = 2,
p1 = 0, p2 = 7*pi/16, p3 = 0, p4 = 0)
cool_shape
harmonograph(cool_shape) %>%
ggplot(aes(x,y)) +
geom_point(alpha = .03, size = .03)
harmonograph(A1 = 1, A2 = 1, A3 = 1, A4 = 1,
d1 = 0.0085, d2 = 0, d3 = 0.065, d4 = 0,
f1 = 2.01, f2 = 3, f3 = 3, f4 = 2,
p1 = 0, p2 = 7*pi/16, p3 = 0, p4 = 0) %>%
ggplot(aes(x,y)) +
geom_point(alpha = .03, size = .03)
x11()
cool_shape = c(A1 = 1, A2 = 1, A3 = 1, A4 = 1,
d1 = 0.0085, d2 = 0, d3 = 0.065, d4 = 0,
f1 = 2.01, f2 = 3, f3 = 3, f4 = 2,
p1 = 0, p2 = 7*pi/16, p3 = 0, p4 = 0)
harmonograph(A1 = 1, A2 = 1, A3 = 1, A4 = 1,
d1 = 0.0085, d2 = 0, d3 = 0.065, d4 = 0,
f1 = 2.01, f2 = 3, f3 = 3, f4 = 2,
p1 = 0, p2 = 7*pi/16, p3 = 0, p4 = 0) %>%
ggplot(aes(x,y)) +
geom_point(alpha = .03, size = .03)
install.packages("mathart")
x11()
# have to copy and paste this in to get a cool shape
# The A parameters seem to exagerate the shape you get in some ways
# A1 = 1, A2 = 1, A3 = 1, A4 = 1,
# d1 = 0.0085, d2 = 0, d3 = 0.065, d4 = 0,
# f1 = 2.01, f2 = 3, f3 = 3, f4 = 2,
# p1 = 0, p2 = 7*pi/16, p3 = 0, p4 = 0
harmonograph(A1 = 1, A2 = 1, A3 = 1, A4 = 1,
d1 = 0.0085, d2 = 0, d3 = 0.065, d4 = 0,
f1 = 2.01, f2 = 3, f3 = 3, f4 = 2,
p1 = 0, p2 = 7*pi/16, p3 = 0, p4 = 0) %>%
ggplot(aes(x,y)) +
geom_path(aes(x, y), df, alpha = 0.25, size = 0.5) +
coord_equal()
harmonograph(A1 = 1, A2 = 1, A3 = 1, A4 = 1,
d1 = 0.0085, d2 = 0, d3 = 0.065, d4 = 0,
f1 = 2.01, f2 = 3, f3 = 3, f4 = 2,
p1 = 0, p2 = 7*pi/16, p3 = 0, p4 = 0) %>%
ggplot(aes(x,y)) +
geom_path(aes(x, y), alpha = 0.25, size = 0.5) +
coord_equal()
R.version()
R.version
dir()
d <- read.csv("lilkelsey.csv")
head(d)
colnames(d) <- c("date", "followers", "Posty")
head(d)
library(tidyverse)
d %>%
ggplot(aes(data, colour = Posty, fill = Posty)) +
geom_point()
d %>%
ggplot(aes(data, colour = Posty, fill = Posty)) +
geom_bar()
d %>%
ggplot(aes(date, followers, colour = Posty, fill = Posty)) +
geom_bar()
d %>%
ggplot(aes(date, followers, colour = Posty, fill = Posty)) +
geom_point()()
d %>%
ggplot(aes(date, followers, colour = Posty, fill = Posty)) +
geom_point()
d %>%
ggplot(aes(date, followers, colour = Posty, fill = Posty)) +
geom_col()
d %>%
ggplot(aes(date, followers, colour = Posty, fill = Posty)) +
geom_col() + theme_bw() + see::scale_color_flat() + see::scale_fill_flat()
n_participants_2 = 30
# how many people do we expect to be able to do the second part
attrition = 1
# how many people would we need to test to get the desired n for
# part 2 given some attrition rate
n_participants_1 = ceiling(n_participants_2/attrition)
# both parts in one with two lots of participants doing two different tasks that should be matched in terms of time
n_participants = 30
n_conditions = 2
time = 20
Cost = (prolific_cpm * time * n_participants) + (n_participants * prolific_cpp) + (n_participants + pavlovia_cpp)
Cost
n_participants_1 = ceiling(n_participants_2/attrition)
# Session times
Session_1 = 10
# this is a guess at the moment
# Depends on how we want to set up part 2
Session_2 = 15
# Cost
# cost per minute
prolific_cpm = 0.125
# cost per participant
prolific_cpp = .5
pavlovia_cpp = .2
# total cost
Cost_session1 = (prolific_cpm * Session_1 * n_participants_1) + (n_participants_1 * prolific_cpp) + (n_participants_1 * pavlovia_cpp)
Cost_session2 = (prolific_cpm * Session_2 * n_participants_2) + (n_participants_2 * prolific_cpp) + (n_participants_2 * pavlovia_cpp)
Cost = Cost_session1 + Cost_session2
Cost
#### new setup ####
# both parts in one with two lots of participants doing two different tasks that should be matched in terms of time
n_participants = 30
n_conditions = 2
time = 20
Cost = (prolific_cpm * time * n_participants) + (n_participants * prolific_cpp) + (n_participants + pavlovia_cpp)
Cost
Cost = (prolific_cpm * time * n_participants) + (n_participants * prolific_cpp) + (n_participants + pavlovia_cpp) * n_conditions
Cost
Cost = ((prolific_cpm * time * n_participants) + (n_participants * prolific_cpp) + (n_participants + pavlovia_cpp)) * n_conditions
Cost
d %>%
ggplot(aes(followers, colour = Posty, fill = Posty)) +
geom_histogram() + theme_bw() + see::scale_color_flat() + see::scale_fill_flat()
d %>%
ggplot(aes(followers, colour = Posty, fill = Posty)) +
geom_histogram(position = "dodge") + theme_bw() + see::scale_color_flat() + see::scale_fill_flat()
d %>%
mutate(prev_day_post = lag(Posty, 1))
d %>%
mutate(prev_day_post = lag(Posty, 1)) %>%
drop_na() %>%
ggplot(aes(followers, fill = prev_day_post)) +
geom_histogram(position = "dodge")
d %>%
mutate(prev_day_post = lag(Posty, 1)) %>%
drop_na() %>%
mutate(cat = paste(Posty, prev_day_post, sep = "_")) %>%
ggplot(aes(followers, fill = cat)) +
geom_histogram(position = "dodge")
# how many participants do we want
n_participants_2 = 30
# how many people do we expect to be able to do the second part
attrition = .8
# how many people would we need to test to get the desired n for
# part 2 given some attrition rate
n_participants_1 = ceiling(n_participants_2/attrition)
# Session times
Session_1 = 10
# this is a guess at the moment
# Depends on how we want to set up part 2
Session_2 = 15
# Cost
# cost per minute
prolific_cpm = 0.125
# cost per participant
prolific_cpp = .5
pavlovia_cpp = .2
# total cost
Cost_session1 = (prolific_cpm * Session_1 * n_participants_1) + (n_participants_1 * prolific_cpp) + (n_participants_1 * pavlovia_cpp)
Cost_session2 = (prolific_cpm * Session_2 * n_participants_2) + (n_participants_2 * prolific_cpp) + (n_participants_2 * pavlovia_cpp)
Cost = Cost_session1 + Cost_session2
Cost
#### new setup ####
# both parts in one with two lots of participants doing two different tasks that should be matched in terms of time
n_participants = 30
n_conditions = 2
time = 20
Cost = ((prolific_cpm * time * n_participants) + (n_participants * prolific_cpp) + (n_participants + pavlovia_cpp)) * n_conditions
Cost
prolific_cpm * time
library(tidyverse)
m <- 3
sd <- .2
iter <- 10000
tibble(value = rnorm(iter, m, sd)) %>%
ggplot(aes(exp(value))) +
geom_density()
# plinko machine
df_plink <- tibble(drop = numeric(),
time = numeric(),
direction = numeric(),
x_pos = numeric())
steps = 51
iters = 10000
n = steps * iters
df_plink <- data.table::data.table(drop = rep(0,n),
time = rep(0,n),
direction = rep(0,n),
x_pos = rep(0,n))
count = 0
steps = 10
iters = 10000
sqrt(10)
count = 0
for(ii in 1:iters){
init_x = 0
x = init_x
for(t in 0:(steps-1)){
count = count + 1
if(t > 0){
move = runif(1, 0, 1)
if(move <= .5){
move = -1
} else {
move = 1
}
x = x + move
}
# add in data frame
df_plink[count, drop := ii]
df_plink[count, time := t]
df_plink[count, direction := move]
df_plink[count, x_pos := x]
}
}
move = runif(1, 0, 1)
move
steps = 10
iters = 10000
n = steps * iters
df_plink <- data.table::data.table(drop = rep(0,n),
time = rep(0,n),
direction = rep(0,n),
x_pos = rep(0,n))
count = 0
for(ii in 1:iters){
init_x = 0
x = init_x
for(t in 0:(steps-1)){
count = count + 1
if(t > 0){
move = runif(1, 0, 1)
if(move <= .5){
move = -1
} else {
move = 1
}
x = x + move
}
# add in data frame
df_plink[count, drop := ii]
df_plink[count, time := t]
df_plink[count, direction := move]
df_plink[count, x_pos := x]
}
}
# plot this
df_plink %>%
mutate(time = (time * -1) + max(time)) %>%
# filter(time < 5) %>%
ggplot(aes(time, x_pos)) +
geom_line(aes(group = drop),
alpha = .1) +
coord_flip() +
theme_bw()
x11()
df_plink %>%
mutate(time = (time * -1) + max(time)) %>%
# filter(time < 5) %>%
ggplot(aes(time, x_pos)) +
geom_line(aes(group = drop),
alpha = .1) +
coord_flip() +
theme_bw()
df_plink %>%
mutate(dist = abs(x_pos)) %>%
ggplot(aes(dist)) +
geom_density()
df_plink %>%
mutate(dist = abs(x_pos)) %>%
summarise(mu = mean(dist),
med = median(dist))
sqrt(10)
df_plink %>%
mutate(dist = abs(x_pos)) %>%
summarise(mu = mean(dist)*2,
med = median(dist))
dir()
setwd("E:/Github/Avatar_online/Piloting")
#### Making plots ####
# this uses the pilot data for now, but it should be fine
#### library ####
library(tidyverse)
#### Source ####
source("2_process_data.R")
#### Plots ####
#### > Demo plots ####
# we want to plot accuracy over distance
# also, maybe some plots to look at how close people got to the target?
plt_acc <- df_demo %>%
group_by(participant, Demo_delta) %>%
mutate(acc = mean(Demo_Success)) %>%
ggplot(aes(Demo_delta, Demo_Success)) +
# ggplot(aes(abs(Demo_xposTarget), Demo_Success)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = F) +
geom_point(aes(Demo_delta, acc)) +
# geom_point(aes(abs(Demo_xposTarget), acc)) +
facet_wrap(~participant)
# x11()
plt_acc
plt_end <- df_demo %>%
mutate(acc = as.factor(Demo_Success),
abs_finalx = abs(Demo_FinalXFixed),
success = as.factor(Demo_Success),
abs_target = abs(Demo_xposTarget),
side = ifelse(Demo_xposTarget < 0, "left", "right")) %>%
ggplot(aes(abs_finalx, Demo_FinalYFixed)) +
geom_point(aes(x = 0, y = 100),
shape = 4) +
geom_jitter(aes(x = abs_finalx, y =  Demo_FinalYFixed,
colour = success,
), alpha = .3) +
ggforce::geom_ellipse(aes(x0 = abs_target,
y0 = 0,
a = Params_Reach,
b = Params_Reach,
angle = 0),
alpha = .01) +
facet_grid(participant~abs_target)
# x11()
plt_end
#### drawing parabola ####
library(tidyverse)
#### Functions ####
# draw the parabola
parab <- function(time, height, gravity, velocity, angle, wind){
if(missing(wind)){
wind <- 0
}
radians <- angle*pi/180
vel_x <- velocity * cos(radians)
vel_y <- velocity * sin(radians)
# get coords
x <- (vel_x + wind) * time
y <- height + vel_y * time - gravity * time^2
# output
output <- list(y = y, x = x)
return(output)
}
# find parameters
find_range <- function(velocity, angle, gravity){
radians <- angle*pi/180
range <- velocity^2 * sin(2*radians)/gravity
return(range)
}
# find range
find_vel <- function(range, angle, gravity){
radians <- angle*pi/180
velocity <- sqrt(range/(sin(2*radians)/gravity))
return(velocity)
}
# add noise
add_noise <- function(velocity, power_range, scale, drop_point){
low <- power_range * drop_point
if(velocity <= low){
noise <- 0
} else {
noise <- ((velocity - low)/power_range)*scale
}
return(noise)
}
find_time <- function(angle, gravity, velocity){
radians <- angle*pi/180
vel_x <- velocity * cos(radians)
vel_y <- velocity * sin(radians)
t <- 2 * vel_y/gravity
return(t)
}
#### setup ####
# world
gravity <- 10
wind <- 0
height <- 0
# task
range <- 1000
deltas <- seq(100, range, 100)
target_size <- 10
# firing mechanics
power_low <- 0
power_hi <- 100
power_range <- power_hi - power_low
angle_low <- 30
angle_hi <- 30
angle_range <- angle_hi - angle_low
#### draw some end results ####
# so we can see how this looks from ana accuracy persepective
# how many sessions and trials
sessions <- 10
trials <- 1000
# setup df
df_endpos <- tibble(session = rep(seq(1,sessions,1), each = length(deltas) * trials),
delta = rep(rep(deltas, each = trials), sessions),
gravity = gravity,
wind = wind,
height = height,
angle = angle_low,
upper_bound = delta + target_size,
lower_bound = delta - target_size,
velocity = find_vel(delta,
angle,
gravity)) %>%
rowwise() %>%
mutate(noise = add_noise(velocity, power_range, 3, .3),
true_angle = angle + rnorm(1,0,noise),
range = find_range(velocity, true_angle, gravity),
success = ifelse(range <= upper_bound & range >= lower_bound, 1, 0))
# make plots
plt_curve <- df_endpos %>%
group_by(delta, session) %>%
summarise(acc = mean(success)) %>%
ggplot(aes(delta, acc)) +
geom_point() +
geom_smooth(method = glm,
method.args = list(family = binomial))
plt_curve
plt_end <- df_endpos %>%
filter(delta != 1000) %>%
mutate(delta = as.factor(delta)) %>%
ggplot(aes(range,
colour = delta,
fill = delta)) +
# geom_density(alpha = .3) +
geom_histogram(aes(y = ..density..),
alpha = .3) +
geom_vline(aes(xintercept = upper_bound),
linetype = "dashed") +
geom_vline(aes(xintercept = lower_bound),
linetype = "dashed") +
facet_wrap(~delta, scales= "free")
plt_end
head(df_endpos)
a <- c(1.38, 3.22, 4.14, 5.06, 6.9, 9.2)
a / .46
test <- tibble(time = seq(0,2,0.0167))
head(test)
tibble(time = seq(0,2,0.0167)) %>%
mutate(x_pos = parab(time, 0, gravity, 30, 20, 0)$x,
y_pos = parab(time, 0, gravity, 30, 20, 0)$y)
plot(test$x, test$y)
test <- tibble(time = seq(0,2,0.0167)) %>%
mutate(x_pos = parab(time, 0, gravity, 30, 20, 0)$x,
y_pos = parab(time, 0, gravity, 30, 20, 0)$y)
head(test)
range(test$x_pos)
range(test$y_pos)
test %>%
ggplot(aes(x_pos, y_pos)) +
geom_point()
#### test path ####
test <- tibble(time = seq(0,1,0.0167)) %>%
mutate(x_pos = parab(time, 0, gravity, 30, 20, 0)$x,
y_pos = parab(time, 0, gravity, 30, 20, 0)$y)
test %>%
ggplot(aes(x_pos, y_pos)) +
geom_point()
View(test)
range(test$time)
2/.0167
2/(.0167*2)
(2/.0167)/2
find_time(20, 10, 50)
find_time(20, 10, 50) * 0.0167
find_time(20, 10, 50) / 0.0167
find_time(20, 10, 50) / 0.0167/2
find_time(50, 10, 100) / 0.0167/2
