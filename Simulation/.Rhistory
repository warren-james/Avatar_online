# All we need to do is get the placement positions and then from there, simulate a trial
# Do this a bunch of times and then we'll have a data set to play with
#### Library ####
library(tidyverse)
library(data.table)
#### Functions ####
# probably need access to some of the other functions we've defined elsewhere
source("../0_functions.R")
# function to drive the bot
source("0_driving_function.R")
#### Load data ####
# the data we'll be sampling from
load("data/df_part2_Throw")
load("data/df_Aberdeen_decisions")
# data for the bot's parameters
load("../scratch/bot_params")
# naming convention
df_man <- df_part2_Throw
df_aut <- df_Aberdeen_decisions
# tidy
rm(df_Aberdeen_decisions, df_part2_Throw)
#### processing ####
# need to extract only the variables we care about...
# in this case it's the distance and position (in normalised terms)
# maybe only look at the variable condition in the automatic version? Since this is most comparable?
# Also keep participant so we have a bit of variation?
df_aut <- df_aut %>%
filter(truck_perf == "Variable") %>%
mutate(Driving = "Automatic") %>%
group_by(participant) %>%
mutate(Delta = as.numeric(as.factor(delta)),
norm_place = abs(placed_x)/delta) %>%
select(participant, Driving, Delta, norm_place, success) %>%
filter(norm_place <= 1,
norm_place >= -1)
df_man <- df_man %>%
mutate(Driving = "Manual",
participant = Participant) %>%
group_by(participant) %>%
mutate(Delta = as.numeric(as.factor(HoopDelta)),
norm_place = abs(Subject_Position)/HoopDelta,
success = Accuracy) %>%
select(participant, Driving, Delta, norm_place, success) %>%
filter(norm_place <= 1,
norm_place >= -1)
# combine
df <- rbind(df_aut, df_man) %>%
mutate(Delta = (as.numeric(Delta) + 1) * 100,
ypos = 100,
xpos = Delta - ypos,
reach = 50,
speed = 3.5)
# tidy
rm(df_aut, df_man)
#### make a plot to check ####
x11()
df %>%
ggplot(aes(norm_place, colour = Driving,
fill = Driving)) +
geom_density(alpha = .3) +
facet_wrap(~Delta)
df %>%
ggplot(aes(Delta, success,
colour = Driving)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"))
# this looks good
# so let's move on
#### simulating dataset ####
# to do this, we'll sample participants at random
# simulate the truck being driven
# (since the bot is doing this and the bot is meant to reflect human behaviour, we should be ok)
# the we can look at success rates and compare the groups?
#### > setting up parameters ####
n_reps <- 10                # how many of each distance
n_subs <- 30                # how many participants
n_iter <- 3                 # how many experiments do we want to simulate?
conds <- unique(df$Driving) # conditions
deltas <- unique(df$Delta)  # Deltas
sides <- c(-1,1)             # where can the target be
# in the simulation, we will simulate the trial for both sides being selected
# This will effectively give us an estimate of their success rate and should
# be more indicative of a decent trial or not
#### > setup data table ####
# get number of rows
n <- n_reps * length(deltas) * n_subs * length(conds) * n_iter * length(sides)
# sort data
df_sim <- data.table(Iter = rep(0,n),
Driving = rep("", n),
Delta = rep(0, n),
Side = rep(0, n),
Reach = rep(0, n),
xplace = rep(0,n),
xpos = rep(0, n),
ypos = rep(0, n),
success = rep(0, n))
#### > run simulation ####
start <- Sys.time()
count <- 1
for(ii in 1:n_iter){
# loop through conditions
for(cond in conds){
# get subset of data
ss <- df[df$Driving == cond,]
# get random list of participants
subjs <- sample(unique(ss$participant), n_subs)
# loop through participants
for(sub in subjs){
ss_sub <- ss[ss$participant == sub,]
# loop through deltas
for(d in deltas){
# number of reps
ss_delta <- ss_sub[ss_sub$Delta == d,]
for(trial in 1:n_reps){
A_pos <- sample(ss_delta$norm_place,1) * d
# setup bo params
Rt = round(rlnorm(1, bot_params$RT_mu, bot_params$RT_sd))
delay = round(rlnorm(1, bot_params$switch_delay_mu, bot_params$switch_delay_sd))
down_travel = round(rnorm(1, bot_params$down_stop_mu, bot_params$down_stop_sd))
bot_pars <- list(Rt = Rt, delay = delay, down_travel = down_travel)
# run both sides
for(side in sides){
# get results
result <- bot_drive(A_pos * side, d - 100, bot_pars, 45, unique(ss_delta$speed))
# add to data
df_sim[count, Iter := ii]
df_sim[count, Driving := cond]
df_sim[count, Delta := d]
df_sim[count, Side := side]
df_sim[count, Reach := 45]
df_sim[count, xplace := A_pos*side]
df_sim[count, xpos := result$final_x]
df_sim[count, ypos := result$final_y]
df_sim[count, success := result$success]
# increase count
count <- count + 1
}
}
}
}
}
}
print(Sys.time()-start)
# quick plots
df_sim %>%
group_by(Delta)
ggplot(aes(Delta, success, colour = Driving)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = T)
head(df_sim)
df_sim %>%
spread(Side, success)
#### Simulated data set ####
# this could in a way be used as a power analysis?
# not sure...
# This script will use the data from some previous experiments to simulate performance on this
# task in the direction that we might expect. i.e., manual will be better than automatic
# All we need to do is get the placement positions and then from there, simulate a trial
# Do this a bunch of times and then we'll have a data set to play with
#### Library ####
library(tidyverse)
library(data.table)
#### Functions ####
# probably need access to some of the other functions we've defined elsewhere
source("../0_functions.R")
# function to drive the bot
source("0_driving_function.R")
#### Load data ####
# the data we'll be sampling from
load("data/df_part2_Throw")
load("data/df_Aberdeen_decisions")
# data for the bot's parameters
load("../scratch/bot_params")
# naming convention
df_man <- df_part2_Throw
df_aut <- df_Aberdeen_decisions
# tidy
rm(df_Aberdeen_decisions, df_part2_Throw)
#### processing ####
# need to extract only the variables we care about...
# in this case it's the distance and position (in normalised terms)
# maybe only look at the variable condition in the automatic version? Since this is most comparable?
# Also keep participant so we have a bit of variation?
df_aut <- df_aut %>%
filter(truck_perf == "Variable") %>%
mutate(Driving = "Automatic") %>%
group_by(participant) %>%
mutate(Delta = as.numeric(as.factor(delta)),
norm_place = abs(placed_x)/delta) %>%
select(participant, Driving, Delta, norm_place, success) %>%
filter(norm_place <= 1,
norm_place >= -1)
df_man <- df_man %>%
mutate(Driving = "Manual",
participant = Participant) %>%
group_by(participant) %>%
mutate(Delta = as.numeric(as.factor(HoopDelta)),
norm_place = abs(Subject_Position)/HoopDelta,
success = Accuracy) %>%
select(participant, Driving, Delta, norm_place, success) %>%
filter(norm_place <= 1,
norm_place >= -1)
# combine
df <- rbind(df_aut, df_man) %>%
mutate(Delta = (as.numeric(Delta) + 1) * 100,
ypos = 100,
xpos = Delta - ypos,
reach = 50,
speed = 3.5)
# tidy
rm(df_aut, df_man)
#### make a plot to check ####
x11()
df %>%
ggplot(aes(norm_place, colour = Driving,
fill = Driving)) +
geom_density(alpha = .3) +
facet_wrap(~Delta)
df %>%
ggplot(aes(Delta, success,
colour = Driving)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"))
# this looks good
# so let's move on
#### simulating dataset ####
# to do this, we'll sample participants at random
# simulate the truck being driven
# (since the bot is doing this and the bot is meant to reflect human behaviour, we should be ok)
# the we can look at success rates and compare the groups?
#### > setting up parameters ####
n_reps <- 10                # how many of each distance
n_subs <- 30                # how many participants
n_iter <- 3                 # how many experiments do we want to simulate?
conds <- unique(df$Driving) # conditions
deltas <- unique(df$Delta)  # Deltas
sides <- c(-1,1)             # where can the target be
# in the simulation, we will simulate the trial for both sides being selected
# This will effectively give us an estimate of their success rate and should
# be more indicative of a decent trial or not
#### > setup data table ####
# get number of rows
n <- n_reps * length(deltas) * n_subs * length(conds) * n_iter * length(sides)
# sort data
df_sim <- data.table(Iter = rep(0,n),
Count = rep(0,n),
Driving = rep("", n),
Delta = rep(0, n),
Side = rep(0, n),
Reach = rep(0, n),
xplace = rep(0,n),
xpos = rep(0, n),
ypos = rep(0, n),
success = rep(0, n))
#### > run simulation ####
start <- Sys.time()
count <- 1
for(ii in 1:n_iter){
# loop through conditions
for(cond in conds){
# get subset of data
ss <- df[df$Driving == cond,]
# get random list of participants
subjs <- sample(unique(ss$participant), n_subs)
# loop through participants
for(sub in subjs){
ss_sub <- ss[ss$participant == sub,]
# loop through deltas
for(d in deltas){
# number of reps
ss_delta <- ss_sub[ss_sub$Delta == d,]
for(trial in 1:n_reps){
A_pos <- sample(ss_delta$norm_place,1) * d
# setup bo params
Rt = round(rlnorm(1, bot_params$RT_mu, bot_params$RT_sd))
delay = round(rlnorm(1, bot_params$switch_delay_mu, bot_params$switch_delay_sd))
down_travel = round(rnorm(1, bot_params$down_stop_mu, bot_params$down_stop_sd))
bot_pars <- list(Rt = Rt, delay = delay, down_travel = down_travel)
# run both sides
for(side in sides){
# get results
result <- bot_drive(A_pos * side, d - 100, bot_pars, 45, unique(ss_delta$speed))
# add to data
df_sim[count, Iter := ii]
df_sim[count, Count := count]
df_sim[count, Driving := cond]
df_sim[count, Delta := d]
df_sim[count, Side := side]
df_sim[count, Reach := 45]
df_sim[count, xplace := A_pos*side]
df_sim[count, xpos := result$final_x]
df_sim[count, ypos := result$final_y]
df_sim[count, success := result$success]
# increase count
count <- count + 1
}
}
}
}
}
}
print(Sys.time()-start)
df_sim %>%
spread(Side, success)
head(df_sim)
df_sim %>%
select(-Count) %>%
spread(Side, success)
#### Simulated data set ####
# this could in a way be used as a power analysis?
# not sure...
# This script will use the data from some previous experiments to simulate performance on this
# task in the direction that we might expect. i.e., manual will be better than automatic
# All we need to do is get the placement positions and then from there, simulate a trial
# Do this a bunch of times and then we'll have a data set to play with
#### Library ####
library(tidyverse)
library(data.table)
#### Functions ####
# probably need access to some of the other functions we've defined elsewhere
source("../0_functions.R")
# function to drive the bot
source("0_driving_function.R")
#### Load data ####
# the data we'll be sampling from
load("data/df_part2_Throw")
load("data/df_Aberdeen_decisions")
# data for the bot's parameters
load("../scratch/bot_params")
# naming convention
df_man <- df_part2_Throw
df_aut <- df_Aberdeen_decisions
# tidy
rm(df_Aberdeen_decisions, df_part2_Throw)
#### processing ####
# need to extract only the variables we care about...
# in this case it's the distance and position (in normalised terms)
# maybe only look at the variable condition in the automatic version? Since this is most comparable?
# Also keep participant so we have a bit of variation?
df_aut <- df_aut %>%
filter(truck_perf == "Variable") %>%
mutate(Driving = "Automatic") %>%
group_by(participant) %>%
mutate(Delta = as.numeric(as.factor(delta)),
norm_place = abs(placed_x)/delta) %>%
select(participant, Driving, Delta, norm_place, success) %>%
filter(norm_place <= 1,
norm_place >= -1)
df_man <- df_man %>%
mutate(Driving = "Manual",
participant = Participant) %>%
group_by(participant) %>%
mutate(Delta = as.numeric(as.factor(HoopDelta)),
norm_place = abs(Subject_Position)/HoopDelta,
success = Accuracy) %>%
select(participant, Driving, Delta, norm_place, success) %>%
filter(norm_place <= 1,
norm_place >= -1)
# combine
df <- rbind(df_aut, df_man) %>%
mutate(Delta = (as.numeric(Delta) + 1) * 100,
ypos = 100,
xpos = Delta - ypos,
reach = 50,
speed = 3.5)
# tidy
rm(df_aut, df_man)
#### make a plot to check ####
x11()
df %>%
ggplot(aes(norm_place, colour = Driving,
fill = Driving)) +
geom_density(alpha = .3) +
facet_wrap(~Delta)
df %>%
ggplot(aes(Delta, success,
colour = Driving)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"))
# this looks good
# so let's move on
#### simulating dataset ####
# to do this, we'll sample participants at random
# simulate the truck being driven
# (since the bot is doing this and the bot is meant to reflect human behaviour, we should be ok)
# the we can look at success rates and compare the groups?
#### > setting up parameters ####
n_reps <- 10                # how many of each distance
n_subs <- 30                # how many participants
n_iter <- 3                 # how many experiments do we want to simulate?
conds <- unique(df$Driving) # conditions
deltas <- unique(df$Delta)  # Deltas
sides <- c(-1,1)             # where can the target be
# in the simulation, we will simulate the trial for both sides being selected
# This will effectively give us an estimate of their success rate and should
# be more indicative of a decent trial or not
#### > setup data table ####
# get number of rows
n <- n_reps * length(deltas) * n_subs * length(conds) * n_iter * length(sides)
# sort data
df_sim <- data.table(Iter = rep(0,n),
Participant = rep(0,n),
Trial = rep(0,n),
Driving = rep("", n),
Delta = rep(0, n),
Side = rep(0, n),
Reach = rep(0, n),
xplace = rep(0,n),
xpos = rep(0, n),
ypos = rep(0, n),
success = rep(0, n))
#### > run simulation ####
start <- Sys.time()
count <- 1
for(ii in 1:n_iter){
# loop through conditions
for(cond in conds){
# get subset of data
ss <- df[df$Driving == cond,]
# get random list of participants
subjs <- sample(unique(ss$participant), n_subs)
# loop through participants
participant <- 1
for(sub in subjs){
ss_sub <- ss[ss$participant == sub,]
# loop through deltas
participant <- participant + 1
for(d in deltas){
# number of reps
ss_delta <- ss_sub[ss_sub$Delta == d,]
for(trial in 1:n_reps){
A_pos <- sample(ss_delta$norm_place,1) * d
# setup bo params
Rt = round(rlnorm(1, bot_params$RT_mu, bot_params$RT_sd))
delay = round(rlnorm(1, bot_params$switch_delay_mu, bot_params$switch_delay_sd))
down_travel = round(rnorm(1, bot_params$down_stop_mu, bot_params$down_stop_sd))
bot_pars <- list(Rt = Rt, delay = delay, down_travel = down_travel)
# run both sides
for(side in sides){
# get results
result <- bot_drive(A_pos * side, d - 100, bot_pars, 45, unique(ss_delta$speed))
# add to data
df_sim[count, Iter := ii]
df_sim[count, Trial := trial]
df_sim[count, Participant := participant]
df_sim[count, Driving := cond]
df_sim[count, Delta := d]
df_sim[count, Side := side]
df_sim[count, Reach := 45]
df_sim[count, xplace := A_pos*side]
df_sim[count, xpos := result$final_x]
df_sim[count, ypos := result$final_y]
df_sim[count, success := result$success]
# increase count
count <- count + 1
}
}
}
}
}
}
print(Sys.time()-start)
df_sim %>%
spread(Side, success)
head(df_sim)
df_sim %>%
spread(key = Side, value = success)
df_sim %>%
filter(Side == 1) %>%
ggplot(aes(Delta, success, colour = Driving)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = T)
# quick plots
df_sim %>%
filter(Side == -1) %>%
ggplot(aes(Delta, success, colour = Driving)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = T)
df_sim %>%
# filter(Side == -1) %>%
ggplot(aes(Delta, success, colour = Driving)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = T)
length(unique(df$norm_place))
length(unique(df$norm_place)) * 2
head(df)
df <- df %>%
mutate(distance = Delta - (norm_place * Delta))
head(df)
unique(df$distance) * 2
length(unique(df$distance)) * 2
head(df_sim)
df_sim <- df_sim %>%
mutate(distance = Delta - xplace)
head(df_sim)
test <- df_sim[df_sim$Side == 1,]
length(unique(test$distance))
length(unique(test$distance)) * 2
sum(unique(df$distance) %in% unique(df_sim$distance))
sum(unique(df_sim$distance) %in% unique(df$distance))
a <- c(1,3,4)
b <- c(1,3,5)
a %in% b
sum(a %in% b)
b <- c(1,3,5, 6)
a %in% b
sum(unique(df_sim$distance) %in% unique(df$distance))/length(unique(df_sim$distance))
sum(unique(test$distance) %in% unique(df$distance))/length(unique(test$distance))
