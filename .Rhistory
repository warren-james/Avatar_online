mutate(elip_distance = ellipse_dist(Decision_finalX, Decision_finalY, Decision_xposTarget, Decision_yposTarget, Params_ReachX, Params_ReachY))
df_demo <- df_demo %>%
merge(df_params)
#### Add in chance performance ####
df_acc <- tibble(participant = character(),
Condition = character(),
dist = numeric(),
acc = numeric())
# get distances to check...
df_avatar <- df_avatar %>%
# select(participant, Decision_xposTarget, Decision_placement) %>%
mutate(delta = abs(Decision_xposTarget),
distance1 = abs(delta - Decision_placement),
distance2 = abs(delta + Decision_placement),
abs_norm_place = abs(Decision_placement)/delta,
dist_type = ifelse(Decision_Delta < 400, "Close", "Far"))
dists <- c(unique(df_avatar$distance1), unique(df_avatar$distance2), unique(df_avatar$delta))
dists <- unique(dists)
df_accparams <- tibble(participant = character(),
condition = character(),
A = numeric(),
B = numeric())
# now loop and make predictions
print("calculating chance")
# count <- 1
n <- length(unique(df_demo$participant))
pb <- progress_bar$new(total = n)
for(p in unique(df_demo$participant)){
ss <- df_demo[df_demo$participant == p,] %>%
mutate(dist = abs(Demo_xposTarget))
m <- glm(Demo_Success ~ dist,
family = "binomial",
data = ss)
participant = unique(ss$participant)
Condition = unique(ss$Condition)
temp_params <- tibble(participant = participant,
Condition = Condition,
A = m$coefficients[1],
B = m$coefficients[2])
temp <- tibble(participant = participant,
Condition = Condition,
dist = dists) %>%
rowwise() %>%
mutate(acc = predict(m, data.frame(dist = dist), type = "response"))
df_acc <- rbind(df_acc, temp)
df_accparams <- rbind(df_accparams, temp_params)
pb$tick()
}
# tidy
rm(m, ss, temp, temp_params, participant, Condition, dists, n, p, pb)
print("complete")
# bind this data to the trials data so we have chance performance
df_acc1 <- df_acc %>%
mutate(distance1 = dist,
acc1 = acc) %>%
select(-c(dist, acc))
df_acc2 <- df_acc %>%
mutate(distance2 = dist,
acc2 = acc) %>%
select(-c(dist, acc))
df_avatar <- merge(df_avatar, df_acc1) %>%
merge(df_acc2) %>%
mutate(chance = (acc1 + acc2)/2) %>%
select(-c(distance1, distance2, acc1, acc2, delta))
# tidy
rm(df_acc1, df_acc2)
#### Replace ####
# check the manual condition for people who have poor accuracy
limit <- .4
Manual_keep <- df_accparams %>%
filter(Condition == "Manual") %>%
mutate(dist_100 = 100,
dist_200 = 200,
dist_300 = 300,
dist_400 = 400) %>%
gather(dist_100:dist_400,
key = "remove",
value = "distance") %>%
select(-remove) %>%
mutate(accuracy = boot::inv.logit(A + (distance * B)),
exclude = ifelse(boot::inv.logit(A + (200 * B)) < .4, "exclude", "keep"))
Manual_keep %>%
ggplot(aes(distance, accuracy,
colour = exclude)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = F) +
facet_wrap(~participant)
rm(list = ls())
setwd("E:/Github/Avatar_online")
dev.off()
setwd("E:/Github/Avatar_online")
#### Setup SPSS files ####
# this script will produce some SPSS files for analysis...
#### library ####
library(tidyverse)
#### load data ####
source("ProcessData/ProcessData.R")
warnings()
df_SPSS_pos <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(pos = mean(abs_norm_place)) %>%
mutate(pos = round(pos, digits = 3)) %>%
spread(dist_type, pos)
df_SPSS_acc <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(acc = mean(chance)) %>%
mutate(acc = round(acc, digits = 3)) %>%
spread(dist_type, acc)
line_acc <- df_SPSS_acc %>%
gather(Close:Far,
key = "Distance",
value = "Chance") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Chance),
sdev = sd(Chance)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Chance",
labels = scales::percent_format(accuracy = 1)) +
# scale_colour_manual(values = c("#e74c3c")) +
see::scale_color_flat() +
theme_bw()
line_pos <- df_SPSS_pos %>%
gather(Close:Far,
key = "Distance",
value = "Pos") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Pos),
sdev = sd(Pos)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Position") +
# scale_colour_manual(values = c("#e74c3c"))
see::scale_colour_flat() +
theme_bw()
gridExtra::grid.arrange(line_acc, line_pos)
gridExtra::grid.arrange(line_acc, line_pos, ncol = 2)
manual_participants <- unique(Manual_keep[Manual_keep$exclude == "keep",])
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep",])
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
manual_participants
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
auto_participants
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
auto_participants
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
auto_participants
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
auto_participants
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
auto_participants
head(df_SPSS_acc)
df_SPSS_acc <- df_SPSS_acc %>%
filter(participant %in% c(manual_participants, auto_participants))
# set seed so we should always get the same participants
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
participants <- c(manual_participants, auto_participants)
df_SPSS_acc <- df_SPSS_acc %>%
filter(participant %in% participants)
#### Setup SPSS files ####
# this script will produce some SPSS files for analysis...
#### library ####
library(tidyverse)
#### load data ####
source("ProcessData/ProcessData.R")
#### Make SPSS friendly version ####
#### > Make wide data ####
df_SPSS_pos <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(pos = mean(abs_norm_place)) %>%
mutate(pos = round(pos, digits = 3)) %>%
spread(dist_type, pos)
df_SPSS_acc <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(acc = mean(chance)) %>%
mutate(acc = round(acc, digits = 3)) %>%
spread(dist_type, acc)
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant), 20, replace = F)
participants <- c(manual_participants, auto_participants)
test <- df_SPSS_acc %>%
filter(participant %in% participants)
unique(df_SPSS_acc$participant) %in% participants
unique(df_SPSS_acc$participant)
participants
auto_participants
manual_participants
c(manual_participants, auto_participants)
test <- df_SPSS_acc %>%
filter(participant %in% manual_participants | auto_participants)
test <- df_SPSS_acc %>%
filter(participant %in% manual_participants)
manu_acc <- df_SPSS_acc %>%
filter(participant %in% manual_participants)
auto_acc <- df_SPSS_acc %>%
filter(participant %>% auto_participants)
manu_acc <- df_SPSS_acc %>%
filter(participant %in% manual_participants)
df_SPSS_acc <- df_SPSS_acc %>%
filter(participant %>% auto_participants) %>%
rbind(manu_acc)
manu_acc <- df_SPSS_acc %>%
filter(participant %in% manual_participants)
df_SPSS_acc <- df_SPSS_acc %>%
filter(participant %in% auto_participants) %>%
rbind(manu_acc)
View(df_SPSS_acc)
# set seed so we should always get the same participants
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant[df_trials$Condition == "Automatic",]), 20, replace = F)
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant[df_trials$Condition == "Automatic"]), 20, replace = F)
participants <- c(manual_participants, auto_participants)
manu_acc <- df_SPSS_acc %>%
filter(participant %in% manual_participants)
df_SPSS_acc <- df_SPSS_acc %>%
filter(participant %in% auto_participants) %>%
rbind(manu_acc)
auto_participants <- sample(unique(df_trials$participant[df_trials$Condition == "Automatic"]), 20, replace = F)
auto_participants
auto_participants %in% manual_participants
#### Setup SPSS files ####
# this script will produce some SPSS files for analysis...
#### library ####
library(tidyverse)
#### load data ####
source("ProcessData/ProcessData.R")
#### Make SPSS friendly version ####
#### > Make wide data ####
df_SPSS_pos <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(pos = mean(abs_norm_place)) %>%
mutate(pos = round(pos, digits = 3)) %>%
spread(dist_type, pos)
df_SPSS_acc <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(acc = mean(chance)) %>%
mutate(acc = round(acc, digits = 3)) %>%
spread(dist_type, acc)
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant[df_trials$Condition == "Automatic"]), 20, replace = F)
participants <- c(as.character(manual_participants), as.character(auto_participants))
test <- df_SPSS_acc %>%
filter(participant %in% participants)
View(test)
write.table(test_acc, file = "scratch/SPSS_acc.txt", row.names = F)
write.table(test_pos, file = "scratch/SPSS_pos.txt", row.names = F)
df_SPSS_acc <- df_SPSS_acc %>%
filter(participant %in% participants)
df_SPSS_pos <- df_SPSS_pos %>%
filter(participant %in% participants)
write.table(df_SPSS_acc, file = "scratch/SPSS_acc.txt", row.names = F)
write.table(df_SPSS_pos, file = "scratch/SPSS_pos.txt", row.names = F)
plt_chance <- df_SPSS_acc %>%
gather(Close:Far,
key = "dist",
value = "chance") %>%
ggplot(aes(chance, colour = dist, fill = dist)) +
geom_density(alpha = .3) +
guides(fill = guide_legend("Distance"),
colour = guide_legend("Distance")) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~Condition)
plt_pos <- df_SPSS_pos %>%
gather(Close:Far,
key = "dist",
value = "pos") %>%
ggplot(aes(pos, colour = dist, fill = dist)) +
geom_density(alpha = .3) +
scale_x_continuous("Normalised Position") +
guides(fill = guide_legend("Distance"),
colour = guide_legend("Distance")) +
theme_bw()+
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~Condition)
grid.arrange(plt_pos, plt_chance, ncol = 2)
line_acc <- df_SPSS_acc %>%
gather(Close:Far,
key = "Distance",
value = "Chance") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Chance),
sdev = sd(Chance)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Chance",
labels = scales::percent_format(accuracy = 1)) +
# scale_colour_manual(values = c("#e74c3c")) +
see::scale_color_flat() +
theme_bw()
line_pos <- df_SPSS_pos %>%
gather(Close:Far,
key = "Distance",
value = "Pos") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Pos),
sdev = sd(Pos)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Position") +
# scale_colour_manual(values = c("#e74c3c"))
see::scale_colour_flat() +
theme_bw()
gridExtra::grid.arrange(line_acc, line_pos, ncol = 2)
head(df_demographics)
df_demographics %>%
filter(participant %in% participants)
unique(df_demographicsGender)
unique(df_demographics$Gender)
df_demographics %>%
filter(participant %in% participants) %>%
mutate(Gender = tolower(Gender)) %>%
group_by(Gender) %>%
summarise(n = n())
df_demographics %>%
# filter(participant %in% participants) %>%
mutate(Gender = tolower(Gender)) %>%
group_by(Gender) %>%
summarise(n = n())
View(df_demographics)
df_demographics %>%
filter(participant %in% participants) %>%
mutate(Gender = tolower(Gender)) %>%
group_by(Gender) %>%
summarise(n = n())
participants <- unique(df_trials$participant)
results <- "data/ProlificCheck/"
# read in prolific data
df_prol_comp <- tibble()
for(f in dir(results)){
d <- read.csv(paste(results, f, sep = ""))
d <- d %>%
select(participant_id, status, Sex, Age) %>%
mutate(Condition = strsplit(f, ".csv")[[1]][1])
df_prol_comp <- rbind(df_prol_comp, d)
# d <-d %>%
#   select(participant_id)
}
participants <- unique(df_trials$participant)
results <- "data/ProlificCheck/"
# read in prolific data
df_prol_comp <- tibble()
for(f in dir(results)){
d <- read.csv(paste(results, f, sep = ""))
d <- d %>%
select(participant_id, status, Sex, age) %>%
mutate(Condition = strsplit(f, ".csv")[[1]][1])
df_prol_comp <- rbind(df_prol_comp, d)
# d <-d %>%
#   select(participant_id)
}
View(df_prol_comp)
rm(d, f, results)
# #phone_detected
phone <- df_check[df_check$phone == TRUE,]
phone_participants <- unique(phone$participant)
# screen small
screen_small <-df_check[df_check$screenSmall == TRUE,]
small_participants <- unique(screen_small$participant)
# check if we have a file for them
file_present <- unique(df_check$participant)
# checking who is in there
df_prol_comp <- df_prol_comp %>%
# rowwise() %>%
mutate(
phone = ifelse(participant_id %in% phone_participants, "True", "False"),
screenSmall = ifelse(participant_id %in% small_participants, "True", "False"),
file_present = ifelse(participant_id %in% file_present, "True", "False"),
full_set = ifelse(participant_id %in% participants, "True", "False"),
checked = ifelse(full_set == "True", "All good",
ifelse(phone == "True", "Phone",
ifelse(screenSmall == "True", "Screen too small",
ifelse(file_present == "False", "No File", "Check again"))))
) %>%
arrange(Condition, participant_id)
df_prol_comp %>%
filter(participant_id %in% participants)
check <- df_prol_comp %>%
filter(participant_id %in% participants)
SPSS_demographics <- df_demographics %>%
filter(participant %in% participants) %>%
mutate(Gender = tolower(Gender)) %>%
group_by(Gender) %>%
summarise(n = n())
head(SPSS_demographics)
participants
set.seed(1234)
# get participants to keep
manual_participants <- unique(Manual_keep$participant[Manual_keep$exclude == "keep"])
auto_participants <- sample(unique(df_trials$participant[df_trials$Condition == "Automatic"]), 20, replace = F)
participants <- c(as.character(manual_participants), as.character(auto_participants))
participants
SPSS_demographics <- df_demographics %>%
filter(participant %in% participants) %>%
mutate(Gender = tolower(Gender)) %>%
group_by(Gender) %>%
summarise(n = n())
head(SPSS_demographics)
SPSS_demographics <- df_demographics %>%
filter(participant %in% participants) %>%
mutate(Gender = tolower(Gender))
SPSS_demographics
write.table(SPSS_demographics, file = "scratch/demographics.txt", row.names = F)
View(df_prol_comp)
df_prol_comp <- tibble()
for(f in dir(results)){
d <- read.csv(paste(results, f, sep = ""))
d <- d %>%
select(participant_id, status, Sex, age, `Country of Birth`) %>%
mutate(Condition = strsplit(f, ".csv")[[1]][1])
df_prol_comp <- rbind(df_prol_comp, d)
# d <-d %>%
#   select(participant_id)
}
results <- "data/ProlificCheck/"
# read in prolific data
df_prol_comp <- tibble()
for(f in dir(results)){
d <- read.csv(paste(results, f, sep = ""))
d <- d %>%
select(participant_id, status, Sex, age, `Country of Birth`) %>%
mutate(Condition = strsplit(f, ".csv")[[1]][1])
df_prol_comp <- rbind(df_prol_comp, d)
# d <-d %>%
#   select(participant_id)
}
colnames(d)
results <- "data/ProlificCheck/"
# read in prolific data
df_prol_comp <- tibble()
for(f in dir(results)){
d <- read.csv(paste(results, f, sep = ""))
d <- d %>%
select(participant_id, status, Sex, age, Country.of.Birth) %>%
mutate(Condition = strsplit(f, ".csv")[[1]][1])
df_prol_comp <- rbind(df_prol_comp, d)
# d <-d %>%
#   select(participant_id)
}
View(df_prol_comp)
rm(d, f, results)
# #phone_detected
phone <- df_check[df_check$phone == TRUE,]
phone_participants <- unique(phone$participant)
# screen small
screen_small <-df_check[df_check$screenSmall == TRUE,]
small_participants <- unique(screen_small$participant)
# check if we have a file for them
file_present <- unique(df_check$participant)
# checking who is in there
df_prol_comp <- df_prol_comp %>%
# rowwise() %>%
mutate(
phone = ifelse(participant_id %in% phone_participants, "True", "False"),
screenSmall = ifelse(participant_id %in% small_participants, "True", "False"),
file_present = ifelse(participant_id %in% file_present, "True", "False"),
full_set = ifelse(participant_id %in% participants, "True", "False"),
checked = ifelse(full_set == "True", "All good",
ifelse(phone == "True", "Phone",
ifelse(screenSmall == "True", "Screen too small",
ifelse(file_present == "False", "No File", "Check again"))))
) %>%
arrange(Condition, participant_id)
demo <- df_prol_comp %>% filter(participant_id %in% participants)
View(demo)
View(SPSS_demographics)
write.table(SPSS_demographics, file = "scratch/demographics.txt", row.names = F)
