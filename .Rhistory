theme(strip.text.x = element_blank())
plt_acc
df_avatar <- df_avatar %>%
filter(abs_norm_place <= 1.1)
plt_pos_overall <- df_avatar %>%
# filter(Decision_Delta %in% c(200, 500)) %>%
ggplot(aes(abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(expression(paste("Normalised ", Delta, sep = ""))) +
facet_wrap(~dist_type) +
theme_bw()
plt_pos_overall
plt_chance_overall <- df_avatar %>%
ggplot(aes(chance,
colour = Condition,
fill = Condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous("Chance", labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~dist_type) +
theme_bw()
plt_chance_overall
plt_scaled <- df_avatar %>%
mutate(
dist = Decision_xposTarget
# dist = Decision_Delta
) %>%
merge(df_acc) %>%
ggplot(aes(acc, abs_norm_place,
colour = Condition)) +
geom_jitter(alpha = .3,
position = position_dodge(.1)) +
see::scale_colour_flat() +
scale_x_continuous("Chance of success from the centre",
labels = scales::percent_format(accuracy = 1),
breaks = c(.25, .75)) +
scale_y_continuous(expression(paste("Normalised ", Delta, sep = ""))) +
facet_wrap(~participant, ncol = 6) +
theme_bw() +
theme(strip.text.x = element_blank())
x11()
plt_scaled
#### Modelling ####
# Modelling the Avatar online data
#### library ####
library(tidyverse)
library(brms)
#### Source ####
# gets data files and functions
source("ProcessData/ProcessData.R")
#### Functions ####
squash <- function(y, max, min, squash){
y <- y * ((max-squash) - (min + squash)) + (min + squash)
}
df_avatar <- df_avatar %>%
filter(exclude == FALSE)
pre_remove <- nrow(df_avatar)
model_data <- df_avatar %>%
filter(abs_norm_place <= 1.1) %>%
mutate(abs_norm_place = ifelse(abs_norm_place > 1, 1, abs_norm_place),
abs_norm_place = squash(abs_norm_place, 1, 0, 1e-4),
norm_delta = Decision_Delta/max(Decision_Delta),
Condition = as.factor(Condition))
post_remove <- nrow(model_data)
data_loss <- 100 - ((post_remove/pre_remove)*100)
print(paste("data lost = ", round(data_loss, digits = 2), "%", sep =""))
# tidy
rm(post_remove, pre_remove)
beep()
#### Modelling ####
m1 <- brm(abs_norm_place ~ Condition * norm_delta + (Condition * norm_delta|participant),
data = model_data,
family = "beta",
chains = 1,
iter = 1000,
warmup = 500)
beep()
summary(m1)
plot(marginal_effects(m1))
plt_scaled <- df_avatar %>%
mutate(
dist = Decision_xposTarget
# dist = Decision_Delta
) %>%
merge(df_acc) %>%
ggplot(aes(acc, abs_norm_place,
colour = Condition)) +
geom_jitter(alpha = .3,
position = position_dodge(.1)) +
see::scale_colour_flat() +
scale_x_continuous("Chance of success from the centre",
labels = scales::percent_format(accuracy = 1),
breaks = c(.25, .75)) +
scale_y_continuous(expression(paste("Normalised ", Delta, sep = ""))) +
facet_wrap(~participant, ncol = 6) +
theme_bw() +
theme(strip.text.x = element_blank())
x11()
plt_scaled
#### Modelling ####
# parameters
m_iter <- 2000
m_control <- list(adapt_delta = .9)
m1 <- brm(abs_norm_place ~ Condition * norm_delta + (Condition * norm_delta|participant),
data = model_data,
family = "beta",
chains = 1,
iter = m_iter,
warmup = m_iter/2,
control = m_control)
beep()
summary(m1)
head(model_data)
m1 <- brm(abs_norm_place ~ Condition * dist_type + (Condition * dist_type|participant),
data = model_data,
family = "beta",
chains = 1,
iter = m_iter,
warmup = m_iter/2,
control = m_control)
beep()
summary(m1)
plot(marginal_effects(m1))
plot(marginal_effects(m1))
save(m1, file = "ModelOutput/m1")
dir("ModelOutput/")
if("m1" %in% dir("ModelOutput/")){
print("yup")
}
if("m1" %in% dir("ModelOutput/")){
print("m1 found. Loading model")
load("ModelOutput/m1")
} else {
m1 <- brm(abs_norm_place ~ Condition * dist_type + (Condition * dist_type|participant),
data = model_data,
family = "beta",
chains = 1,
iter = m_iter,
warmup = m_iter/2,
control = m_control)
beep()
# save
save(m1, file = "ModelOutput/m1")
}
head(model_data)
model_data %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
geom_point(alpha = .3)
model_data %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
geom_jitter(alpha = .3)
model_data %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3)
model_data %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
facet_wrap(~participant)
ing
model_data %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
facet_wrap(~participant, ncol = 6)
model_data %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~participant, ncol = 6) +
theme_bw() +
theme(strip.text.x = element_blank())
x11()
model_data %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~participant, ncol = 6) +
theme_bw() +
theme(strip.text.x = element_blank())
colnames(model_data)
unique(model_data$Decision_Delta)
x11()
model_data %>%
filter(Decision_Delta %in% c(200, 500)) %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~participant, ncol = 6) +
theme_bw() +
theme(strip.text.x = element_blank())
model_data %>%
filter(Decision_Delta %in% c(200, 500)) %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
# facet_wrap(~participant, ncol = 6) +
theme_bw() +
theme(strip.text.x = element_blank())
rm(list = ls())
#### Setup SPSS files ####
# this script will produce some SPSS files for analysis...
#### library ####
library(tidyverse)
#### load data ####
source("ProcessData/ProcessData.R")
#### Make SPSS friendly version ####
#### > Make wide data ####
# filter out "bad" participants
df_avatar <- df_avatar %>%
filter(exclude == FALSE)
df_SPSS_pos <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(pos = mean(abs_norm_place)) %>%
mutate(pos = round(pos, digits = 3)) %>%
spread(dist_type, pos)
df_SPSS_acc <- df_avatar %>%
group_by(participant, dist_type, Condition) %>%
summarise(acc = mean(chance)) %>%
mutate(acc = round(acc, digits = 3)) %>%
spread(dist_type, acc)
#### > write these to .txt files ####
write.table(df_SPSS_acc, file = "scratch/SPSS_acc.txt", row.names = F)
write.table(df_SPSS_pos, file = "scratch/SPSS_pos.txt", row.names = F)
participants <- unique(df_SPSS_acc$participant)
participants
unique(participants)
length(unique(participants))
SPSS_demographics <- df_demographics %>%
filter(participant %in% participants) %>%
mutate(Gender = tolower(Gender))
SPSS_demographics
unique(SPSS_demographics$Gender)
View(df_demographics)
"5dc9ef9a5d81cd71153f8f70" %in% Manual_exclude
"5dc9ef9a5d81cd71153f8f70" %in% Manual_keep
write.table(SPSS_demographics, file = "scratch/demographics.txt", row.names = F)
plt_chance <- df_SPSS_acc %>%
gather(Close:Far,
key = "dist",
value = "chance") %>%
ggplot(aes(chance, colour = dist, fill = dist)) +
geom_density(alpha = .3) +
guides(fill = guide_legend("Distance"),
colour = guide_legend("Distance")) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~Condition)
plt_pos <- df_SPSS_pos %>%
gather(Close:Far,
key = "dist",
value = "pos") %>%
ggplot(aes(pos, colour = dist, fill = dist)) +
geom_density(alpha = .3) +
scale_x_continuous("Normalised Position") +
guides(fill = guide_legend("Distance"),
colour = guide_legend("Distance")) +
theme_bw()+
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~Condition)
grid.arrange(plt_pos, plt_chance, ncol = 2)
line_acc <- df_SPSS_acc %>%
gather(Close:Far,
key = "Distance",
value = "Chance") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Chance),
sdev = sd(Chance)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Chance",
labels = scales::percent_format(accuracy = 1)) +
# scale_colour_manual(values = c("#e74c3c")) +
see::scale_color_flat() +
theme_bw()
line_pos <- df_SPSS_pos %>%
gather(Close:Far,
key = "Distance",
value = "Pos") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Pos),
sdev = sd(Pos)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Position") +
# scale_colour_manual(values = c("#e74c3c"))
see::scale_colour_flat() +
theme_bw()
gridExtra::grid.arrange(line_acc, line_pos, ncol = 2)
line_acc <- df_SPSS_acc %>%
gather(Close:Far,
key = "Distance",
value = "Chance") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Chance),
sdev = sd(Chance)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
# geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Chance",
labels = scales::percent_format(accuracy = 1)) +
# scale_colour_manual(values = c("#e74c3c")) +
see::scale_color_flat() +
theme_bw()
line_pos <- df_SPSS_pos %>%
gather(Close:Far,
key = "Distance",
value = "Pos") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Pos),
sdev = sd(Pos)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
# geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Position") +
# scale_colour_manual(values = c("#e74c3c"))
see::scale_colour_flat() +
theme_bw()
gridExtra::grid.arrange(line_acc, line_pos, ncol = 2)
source("Functions/0_getLegend.R")
line_legend <- g_legend(line_acc)
line_legend
line_legend <- g_legend(line_acc)
grid.arrange(arrangeGrob(line_acc + theme(legend.position = "none"), line_pos, ncol = 2),
line_legend, heights = c(10,1))
#### line plots ####
line_acc <- df_SPSS_acc %>%
gather(Close:Far,
key = "Distance",
value = "Chance") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Chance),
sdev = sd(Chance)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
# geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Chance",
labels = scales::percent_format(accuracy = 1)) +
# scale_colour_manual(values = c("#e74c3c")) +
see::scale_color_flat() +
theme_bw() +
theme(legend.position = "bottom")
line_pos <- df_SPSS_pos %>%
gather(Close:Far,
key = "Distance",
value = "Pos") %>%
group_by(Distance, Condition) %>%
summarise(mu = mean(Pos),
sdev = sd(Pos)) %>%
ggplot(aes(Distance, mu,
colour = Condition)) +
geom_point() +
# geom_errorbar(aes(ymin = mu-sdev, ymax = mu +sdev)) +
geom_line(aes(group = Condition)) +
scale_y_continuous("Mean Position") +
# scale_colour_manual(values = c("#e74c3c"))
see::scale_colour_flat() +
theme_bw() +
theme(legend.position = "none")
line_legend <- g_legend(line_acc)
grid.arrange(arrangeGrob(line_acc + theme(legend.position = "none"), line_pos, ncol = 2),
line_legend, heights = c(10,1))
x11()
grid.arrange(arrangeGrob(line_acc + theme(legend.position = "none"), line_pos, ncol = 2),
line_legend, heights = c(10,1))
rm(list = ls())
#### Modelling ####
# Modelling the Avatar online data
#### library ####
library(tidyverse)
library(brms)
#### Source ####
# gets data files and functions
source("ProcessData/ProcessData.R")
#### Functions ####
squash <- function(y, max, min, squash){
y <- y * ((max-squash) - (min + squash)) + (min + squash)
}
#### Processing ####
# filter out "bad" participants
df_avatar <- df_avatar %>%
filter(exclude == FALSE)
pre_remove <- nrow(df_avatar)
model_data <- df_avatar %>%
filter(abs_norm_place <= 1.1) %>%
mutate(abs_norm_place = ifelse(abs_norm_place > 1, 1, abs_norm_place),
abs_norm_place = squash(abs_norm_place, 1, 0, 1e-4),
norm_delta = Decision_Delta/max(Decision_Delta),
Condition = as.factor(Condition))
post_remove <- nrow(model_data)
data_loss <- 100 - ((post_remove/pre_remove)*100)
print(paste("data lost = ", round(data_loss, digits = 2), "%", sep =""))
# tidy
rm(post_remove, pre_remove)
#### Modelling ####
# parameters for all models
m_iter <- 2000
m_control <- list(adapt_delta = .9)
#### > Rand effects: 2 categorical predictors ####
# check if this exists before running
if("m1" %in% dir("ModelOutput/")){
print("m1 found. Loading model")
load("ModelOutput/m1")
} else {
m1 <- brm(abs_norm_place ~ Condition * dist_type + (Condition * dist_type|participant),
data = model_data,
family = "beta",
chains = 1,
iter = m_iter,
warmup = m_iter/2,
control = m_control)
beep()
# save
save(m1, file = "ModelOutput/m1")
}
#### Plotting ####
# plotting the outputs of the modelling
x11()
model_data %>%
filter(Decision_Delta %in% c(200, 500)) %>%
ggplot(aes(dist_type, abs_norm_place,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
# facet_wrap(~participant, ncol = 6) +
theme_bw() +
theme(strip.text.x = element_blank())
library(brms)
library(tidybayes)
model_data %>%
add_predicted_draws(m1)
model_data %>%
add_predicted_draws(m1) %>%
group_by(.iteration, Condition, dist_type, participant) %>%
summarise(mu = mean(.prediction))
model_data %>%
add_predicted_draws(m1) %>%
group_by(.draw, Condition, dist_type, participant) %>%
summarise(mu = mean(.prediction))
model_data %>%
add_predicted_draws(m1) %>%
group_by(.draw, Condition, dist_type, participant) %>%
summarise(mu = mean(.prediction)) %>%
ggplot(aes(mu,
fill = Condition)) +
geom_density(alpha = .3) +
facet_wrap(~dist_type)
model_data %>%
add_predicted_draws(m1) %>%
group_by(.draw, Condition, dist_type, participant) %>%
summarise(mu = mean(.prediction)) %>%
ggplot(aes(mu,
fill = Condition)) +
geom_density(alpha = .3,
bw = .05) +
facet_wrap(~dist_type)
model_data %>%
add_predicted_draws(m1) %>%
group_by(.draw, Condition, dist_type, participant) %>%
summarise(mu = mean(.prediction)) %>%
ggplot(aes(mu,
colour = Condition,
fill = Condition)) +
geom_density(alpha = .3,
bw = .05) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
facet_wrap(~dist_type)
